int led[10][12]={
             0  ,1  ,2  ,3  ,4  ,5  ,6  ,7  ,8  ,9  ,10 ,11,
             23 ,22 ,21 ,20 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12,
             24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35,
             47 ,46 ,45 ,44 ,43 ,42 ,41 ,40 ,39 ,38 ,37 ,36,
             48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59,
             71 ,70 ,69 ,68 ,67 ,66 ,65 ,64 ,63 ,62 ,61 ,60,                     
             72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83,                      
             95 ,94 ,93 ,92 ,91 ,90 ,89 ,88 ,87 ,86 ,85 ,84,                      
             96 ,97 ,98 ,99 ,100,101,102,103,104,105,106,107,                      
             119,118,117,116,115,114,113,112,111,110,109,108,                      
};

byte mau[][10] = { 0,0,1,1,1,1,1,0,0,0,
                   0,0,0,0,0,0,0,1,0,0,
                   0,0,0,0,1,1,1,0,0,0,
                   0,0,0,0,0,0,0,1,0,0,
                   0,0,1,1,1,1,1,0,0,0,     // W  
};
int mau2[][10] = { 0,0,1,1,1,1,1,0,0,0,   //w
                   0,0,0,0,0,0,0,1,0,0,
                   0,0,0,0,1,1,1,0,0,0,
                   0,0,0,0,0,0,0,1,0,0,
                   0,0,1,1,1,1,1,0,0,0,   // w -5
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,1,1,1,1,1,1,0,0,   //E - 7
                   0,0,1,0,1,0,0,1,0,0,
                   0,0,1,0,1,0,0,1,0,0,
                   0,0,1,0,0,0,0,1,0,0,   //E - 9
                   0,0,0,0,0,0,0,0,0,0,   // 10
                   0,0,1,1,1,1,1,1,0,0, 
                   0,0,0,0,0,0,0,1,0,0,  
                   0,0,0,0,0,0,0,1,0,0,   //L - 13
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,1,1,1,1,1,1,0,0,   //C
                   0,0,1,0,0,0,0,1,0,0,
                   0,0,1,0,0,0,0,1,0,0,
                   0,0,0,0,0,0,0,0,0,0,   //
                   0,0,1,1,1,1,1,1,0,0,   //O
                   0,0,1,0,0,0,0,1,0,0,
                   0,0,1,0,0,0,0,1,0,0,
                   0,0,1,1,1,1,1,1,0,0,
                   0,0,0,0,0,0,0,0,0,0,   //
                   0,0,1,1,1,1,1,1,0,0,   //M
                   0,0,0,1,0,0,0,0,0,0,  
                   0,0,0,0,1,0,0,0,0,0,
                   0,0,0,1,0,0,0,0,0,0,
                   0,0,1,1,1,1,1,1,0,0, // M
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,1,1,1,1,1,1,0,0, //E
                   0,0,1,0,1,0,0,1,0,0,
                   0,0,1,0,1,0,0,1,0,0,  
                   0,0,1,0,0,0,0,1,0,0, //E
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,
};
byte nho[][12]={0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0 };

int color = 0;
int x=0;
int y=0;
int b=0;
int j=0;
int o=0;
int gan=0;
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif
#define PIN        6
#define NUMPIXELS 120
int i=0;     
int a=50; //delay
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

void setup() {
  Serial.begin(9600);
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  
  int color = 0;
  int x=0;
  int y=0;
  int o=0;
  pixels.begin();
}
void quet(int a , int b , int c){
 pixels.clear();
     for(y=0;y<11;y++){
      for(x=0;x<10;x++){
          nho[x][y]=nho[x][y+1];
      }
     }
 
     for(y=0;y<12;y++){
 
      for(x=0;x<10;x++){
       
        nho[x][11]=mau2[o][x];
        if(o==40)
        {
          o=0;
        }
        if(nho[x][y]==1){
            pixels.setPixelColor(led[x][y],pixels.Color(a,b,c)); //R,G,B            
        }
        else{
            pixels.setPixelColor(led[x][y],pixels.Color(13,9,46)); //R,G,B    
        }
      }      
   }
     pixels.show();
     delay(100);   
     o=o+1;  
}
void loop() {
    quet(255,255,0);
    quet(255,0,255);
    quet(0,255,255);
    quet(0,255,0);
    quet(255,0,0);
    quet(0,0,255);
}
  


          
